{"version":3,"sources":["images/android-icon.svg","images/ios-icon.svg","components/BeatHeader/BeatHeader.js","components/BeatButton/BeatButton.js","pages/Index/Index.js","pages/Download/Download.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BeatHeader","react_default","a","createElement","className","Link","to","style","textDecoration","this","props","title","subtitle","Component","BeatButton","onClick","text","Index","height","backgroundColor","components_BeatButton_BeatButton","_downloadApk","Download","src","AndroidIcon","alt","IosIcon","_jumpToIos","id","lib_default","value","size","window","location","document","querySelector","scrollIntoView","behavior","App","BrowserRouter","components_BeatHeader_BeatHeader","Route","path","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46158917.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/android-icon.83f0e891.svg\";","module.exports = __webpack_public_path__ + \"static/media/ios-icon.1b7d43b9.svg\";","import React, { Component } from 'react';\nimport './BeatHeader.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass BeatHeader extends Component {\n    render() {\n        return (\n            <div className=\"header-main\">\n                <Link to=\"/\" style={{ textDecoration: 'none' }}>\n                    <div className=\"header-title\">{this.props.title}\n                        {this.props.subtitle &&\n                            <span className=\"header-subtitle\">{this.props.subtitle}</span>\n                        }</div>\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default BeatHeader;\n","import React, { Component } from 'react';\nimport './BeatButton.css';\n\nclass BeatButton extends Component {\n    render() {\n        return (\n            <div>\n                <button className=\"main-button\" onClick={this.props.onClick}>\n                    <span>{this.props.text}</span>\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default BeatButton;\n","import React, { Component } from 'react';\nimport BeatButton from \"../../components/BeatButton/BeatButton.js\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport AndroidIcon from \"../../images/android-icon.svg\"\nimport './Index.css';\n\nclass Index extends Component {\n    render() {\n        return (\n            <div className=\"div-wrapper\">\n                <div style={{ height: \"calc(100vh - 50px)\", backgroundColor: \"#292929\" }} className=\"div-container first-wrapper\">\n                    <div>\n                        <span className=\"title-bold\">Beatmanga</span>\n                        <span className=\"subtitle\">Read everything. Read everywhere.</span>\n                    </div>\n                    <div>\n                        <Link to=\"/download\">\n                            <BeatButton text=\"Download now\" onClick={this._downloadApk} />\n                        </Link>\n                        {/* <span className=\"subtitle\">Currently only for android <img className=\"android-icon\" src={AndroidIcon} alt=\"android icon\"/></span> */}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    _downloadApk() {};\n}\n\nexport default Index;\n","import React, { Component } from 'react';\nimport BeatButton from \"../../components/BeatButton/BeatButton.js\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport AndroidIcon from \"../../images/android-icon.svg\"\nimport IosIcon from \"../../images/ios-icon.svg\"\nimport './Download.css';\nimport QRCode from 'qrcode.react';\n\nclass Download extends Component {\n    render() {\n        return (\n            <div className=\"div-wrapper\">\n                <div style={{ height: \"calc(100vh - 50px)\", backgroundColor: \"#292929\" }} className=\"div-container first-wrapper\">\n                    <div>\n                        <img className=\"so-icon\" src={AndroidIcon} alt=\"android icon\" />\n                        <BeatButton text=\"Download APK\" onClick={this._downloadApk} />\n                        <span className=\"subtitle\">Supported Android Version: 4.0.0+</span>\n                    </div>\n                    <div>\n                        <img className=\"so-icon\" src={IosIcon} alt=\"ios icon\" />\n                        <BeatButton text=\"Join iOS beta\" onClick={this._jumpToIos} />\n                        <span className=\"subtitle\">Supported iOS Version: 9.0+</span>\n                    </div>\n                </div>\n                <div style={{ backgroundColor: \"#ffffff\" }} id=\"iosBeta\" className=\"div-container\">\n                    <div>\n                    <span className=\"title-bold-download\">Join iOS beta</span>\n                        <span className=\"subtitle-download\">\n                            Since we cannot distribute our app on official stores, we are trying an alternative solution to distribute our app for iOS users. You can try it now doing the follow:\n                            <br/><br/>\n                            <span className=\"number-index\">1</span> Download the app <b>Expo Client</b><br/>\n                            <span className=\"number-index\">2</span> Open the iOS camera<br/>\n                            <span className=\"number-index\">3</span> Scan the QRCode below\n                        </span>\n                    </div>\n                    <div>\n                        <QRCode value=\"exp://67-zjj.rarokko.beatmanga.exp.direct\" size=\"256\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    _downloadApk() {\n        window.location = \"https://expo.io/artifacts/8f517d2a-3c3d-4afe-9f5b-a6c04bb004e6\";\n     };\n\n    _jumpToIos() { \n        document.querySelector('#iosBeta').scrollIntoView({\n            behavior: 'smooth'\n        });\n    };\n}\n\nexport default Download;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport BeatHeader from \"./components/BeatHeader/BeatHeader.js\";\nimport './App.css';\n\nimport Index from \"./pages/Index/Index.js\";\nimport Download from \"./pages/Download/Download.js\";\n\nclass App extends Component {\n\n  componentDidMount() { document.title = \"Beatmanga\" };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"div-main\">\n          <nav>\n            <BeatHeader title=\"Beatmanga\" subtitle=\"Manga for everyone\" />\n          </nav>\n\n          <Route path=\"/\" exact component={Index} />\n          <Route path=\"/download/\" component={Download} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}